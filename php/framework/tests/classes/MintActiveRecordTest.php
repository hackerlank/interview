<?php

require_once '/usr/local/www/mint/application/core/MintActiveRecord.php';

/**
 * Test class for MintActiveRecord.
 * Generated by PHPUnit on 2011-09-20 at 19:13:29.
 */
class MintActiveRecordTest extends PHPUnit_Framework_TestCase
{
    protected $obj1;
    protected $obj2;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->obj1 = test1::getByPK(1);
        $this->obj2 = test2::getByPK('shirou');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testGetPKValue()
    {
        $this->assertEquals(1, $this->obj1->getPKValue());
        $this->assertInternalType('integer', $this->obj1->getPKValue());

        $this->assertEquals('shirou', $this->obj2->getPKValue());
        $this->assertInternalType('string', $this->obj2->getPKValue());
    }

    public function test__get()
    {
        $this->assertEquals(1, $this->obj1->id);
    }

    public function test__set()
    {
        $this->obj1->id = 5;

        $this->assertEquals(5, $this->obj1->id);
    }

    public function test__clone() {

        $this->markTestIncomplete('not yet');
    }

    public function testToDBType()
    {
        foreach(array('text', 'string', 'varchar', 'interval', 'inet', 'bit') as $string_type) {
            $this->assertInternalType('string', MintActiveRecord::toDBType($string_type, 1));
            $this->assertEquals('1', MintActiveRecord::toDBType($string_type, 1));
        }

        foreach(array('serial', 'integer', 'bigint', 'smallint') as $int_type) {
            $this->assertInternalType('integer', MintActiveRecord::toDBType($int_type, '1'));
            $this->assertEquals(1, MintActiveRecord::toDBType($int_type, '1'));
        }

        foreach(array('numeric', 'float', 'double precision') as $float_type) {
            $this->assertInternalType('float', MintActiveRecord::toDBType($float_type, '1'));
            $this->assertEquals(1, MintActiveRecord::toDBType($int_type, '1'));
        }

        $this->assertInternalType('boolean', MintActiveRecord::toDBType('boolean', '1'));
        
        // @todo: date tests
        // @todo: text[] tests

        $this->setExpectedException('MintException');

        MintActiveRecord::toDBType('wrong-type', '1');
    }

    public function testLoad()
    {
        $obj = new test2();
        $obj->test_key = 'shirou';
        $obj->load();

        $this->assertEquals('saber', $obj->test_field);
    }

    public function testDelete()
    {
        $this->obj1->delete();

        try {

            $obj2 = test1::getByPK(1);
            $this->fail('MintLoadException expected');

        } catch (MintLoadException $e) {}

        $this->obj1->save();

        $this->obj2->delete();

        try {

            $obj2 = test2::getByPK('shirou');
            $this->fail('MintLoadException expected');

        } catch (MintLoadException $e) {}

        $this->obj2->save();
    }

    public function testSave()
    {
        $this->obj1->id = 5;
        $this->obj1->save();

        $obj = test1::getByPK(5);

        $this->assertInstanceOf('test1', $obj);
        $this->assertEquals(5, $obj->id);

        $this->obj1->id = 1;
        $this->obj1->save();

        $obj = test1::getByPK(1);
        $this->assertEquals(1, $obj->id);
    }


    public function testAsArray()
    {
        $this->assertInternalType('array', $this->obj1->asArray());

        $array = $this->obj1->asArray();

        $this->assertArrayHasKey('id', $array);
        $this->assertEquals($this->obj1->id, $array['id']);
    }

    public function testGetByPK()
    {
        $obj = test1::getByPK(1);
        $this->assertInstanceOf('test1', $obj);

        $this->assertInstanceOf('test2', test2::getByPK('shirou'));

        $this->setExpectedException('MintLoadException');

        $obj = test1::getByPK(9000);
    }

    public function testGetByName()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetOne().
     */
    public function testGetOne()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetAll().
     */
    public function testGetAll()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetByParams().
     */
    public function testGetByParams()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetCount().
     */
    public function testGetCount()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testExists().
     */
    public function testExists()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
?>
